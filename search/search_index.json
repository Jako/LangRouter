{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LangRouter","text":"<p>LangRouter is a language routing plugin for MODx Revolution that is meant to be used with Babel. It takes care of switching contexts that hold the translations, depending on the URL requested by the client.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.6+</li> <li>PHP 5.6+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>LangRouter works out-of-the-box and doesn't require any URL rewrite rule changes in the webserver configuration.</li> <li>It checks the client's browser accepted languages and switches to the first accepted and available language context.</li> <li>All routing is handled internally by MODX. This greatly simplifies the setup and provides portability. </li> <li>LangRouter was tested with Apache and Lighttpd.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for LangRouter in the Package Manager of a MODX installation and install it in there. You have to fill the context key of the default language during the setup. See in Usage for the possible value.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install LangRouter.</p> <ul> <li>Download the transport package from MODX   Extras (or one of the pre built   transport packages in   _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or   upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search   locally for packages' from the dropdown button.</li> <li>LangRouter should now show up in the list of available packages. Click the   corresponding 'Install' button and follow the instructions to complete the   installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of LangRouter contains a config.json to build that package locally. Use this option, if you want to debug LangRouter and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#prepare-your-contexts","title":"Prepare your contexts","text":"<p>After (or before) the installation of LangRouter you have to prepare your contexts.</p> <ol> <li>Create one context for each language and name it with the language name.    Normally the context key would be equal with the cultureKey context setting    of that language, i.e. <code>en</code> as context key and <code>English</code> as context    name when the cultureKey is <code>en</code>.</li> <li>Create the context setting base_url in each context and set it to <code>/</code>.</li> <li>Create the context setting cultureKey in each context and set it to the    according cultureKey, i.e. <code>en</code>.</li> <li>Optionally create the context setting cultureKeyAliases in each context    and set it to a comma-separated list of other culture keys to which this    context should respond, i.e. <code>de,nl</code>.</li> <li>For each context create a site_url context setting and fill it with the    following value: <code>{url_scheme}{http_host}{base_url}{cultureKey}/</code>. MODX    handles the placeholder replacements in that setting on its own.</li> <li>Fill the MODX system setting babel.contextDefault with the context key of    the default language, if you did not fill this during the installation of    LangRouter.</li> <li>In head section of the template insert the following line <code>&lt;base    href=\"[[!++site_url]]\"&gt;</code>.</li> <li>Include the static files from the assets folder in your installation with    <code>[[++assets_url]]path/to/static_file</code>, i.e. <code>&lt;link    href=\"[[++assets_url]]css/site.css\" rel=\"stylesheet\"&gt;</code> or <code>&lt;img    src=\"[[++assets_url]]images/whatever.jpg\" \u2026 &gt;</code>. You could use    <code>[[++base_url]]path/to/static_file</code>, if your assets are not located inside the    assets folder.</li> <li>Set the MODX system setting link_tag_scheme to <code>-1</code> (URL is relative to    site_url)</li> </ol> <p>To create these settings easily, you could use the Cross Contexts Settings extra available on MODX Extras.</p>"},{"location":"usage/#example","title":"Example","text":"<p>Example settings for an <code>en</code> context</p> Context setting Value base_url <code>/</code> cultureKey <code>en</code> cultureKeyAliases <code>de,nl</code> site_url <code>{url_scheme}{http_host}{base_url}{cultureKey}/</code>"},{"location":"usage/#system-settings","title":"System settings","text":"<p>LangRouter uses the following system settings in the namespace <code>langrouter</code>:</p> Key Description Default langrouter.debug Log debug information in the MODX ystem log. No langrouter.response_code Response code for the redirect to the right context, if the culture key is not set. <code>HTTP/1.1 301 Moved Permanently</code> langrouter.contextKeys (optional) Comma separated list of context keys which could be switched to. Defaults to the <code>babel.contextKeys</code> system setting. - <p>Redirect loops possible</p> <p>Please don't activate the friendly_urls_strict MODX system setting, if you use LangRouter. That could cause nasty redirect loops.</p>"},{"location":"usage/#usage-with-other-extras","title":"Usage with other extras","text":"<p>Some extras settings have to be changed to work well with LangRouter (and other routing plugins):</p>"},{"location":"usage/#pthumb","title":"pThumb","text":"<p>Please set the system setting <code>phpthumbof.cache_url</code> to <code>/</code>. Otherwise, the generated thumbnail path of the snippet/output filter will contain the <code>{base_url}{cultureKey}</code> prefix.</p> <p>On the other hand, you can add an additional .htaccess rule that removes this prefix. In the following example, you need to change the list of culture keys. It must be inserted before the friendly URLs part:</p> <pre><code>RewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(en|de|fr|nl)/assets(.*)$ assets$2 [L,QSA]\n</code></pre>"}]}