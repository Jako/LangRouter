{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LangRouter LangRouter is a language routing plugin for MODx Revolution that is meant to be used with Babel. It takes care of switching contexts that hold the translations, depending on the URL requested by the client. Requirements MODX Revolution 2.6+ PHP v5.6+ Features LangRouter works out-of-the-box and doesn't require any URL rewrite rule changes in the webserver configuration. It checks the client's browser accepted languages and switches to the first accepted and available language context. All routing is handled internally by MODX. This greatly simplifies the setup and provides portability. LangRouter was tested with Apache and Lighttpd.","title":"Description"},{"location":"#langrouter","text":"LangRouter is a language routing plugin for MODx Revolution that is meant to be used with Babel. It takes care of switching contexts that hold the translations, depending on the URL requested by the client.","title":"LangRouter"},{"location":"#requirements","text":"MODX Revolution 2.6+ PHP v5.6+","title":"Requirements"},{"location":"#features","text":"LangRouter works out-of-the-box and doesn't require any URL rewrite rule changes in the webserver configuration. It checks the client's browser accepted languages and switches to the first accepted and available language context. All routing is handled internally by MODX. This greatly simplifies the setup and provides portability. LangRouter was tested with Apache and Lighttpd.","title":"Features"},{"location":"donate/","text":"Support LangRouter LangRouter is and always will be free and open-source, but it still requires many man-hours of development, bug-fixing, support in MODX forums and on GitHub between the releases. Please support the ongoing and past development of LangRouter by making a donation below. LangRouter development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.","title":"Donate"},{"location":"donate/#support-langrouter","text":"LangRouter is and always will be free and open-source, but it still requires many man-hours of development, bug-fixing, support in MODX forums and on GitHub between the releases. Please support the ongoing and past development of LangRouter by making a donation below. LangRouter development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.","title":"Support LangRouter"},{"location":"installation/","text":"Install from MODX Extras Search for LangRouter in the Package Manager of a MODX installation and install it in there. You have to fill the context key of the default language during the setup. See in Usage for the possible value. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install LangRouter. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. LangRouter should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of LangRouter contains a config.json to build that package locally. Use this option, if you want to debug LangRouter and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for LangRouter in the Package Manager of a MODX installation and install it in there. You have to fill the context key of the default language during the setup. See in Usage for the possible value.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install LangRouter. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. LangRouter should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of LangRouter contains a config.json to build that package locally. Use this option, if you want to debug LangRouter and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"Prepare your contexts After (or before) the installation of LangRouter you have to prepare your contexts. Create one context for each language and name it with the language name. Normally the context key would be equal with the cultureKey context setting of that language, i.e. en as context key and English as context name when the cultureKey is en . Create the context setting base_url in each context and set it to / . Create the context setting cultureKey in each context and set it to the according cultureKey, i.e. en . For each context create a site_url context setting and fill it with the following value: {url_scheme}{http_host}{base_url}{cultureKey}/ . MODX handles the placeholder replacements in that setting on its own. Fill the MODX system setting babel.contextDefault with the context key of the default language, if you did not fill this during the installation of LangRouter. In head section of the template insert the following line <base href=\"[[!++site_url]]\"> . Include the static files from the assets folder in your installation with [[++assets_url]]path/to/static_file , i.e. <link href=\"[[++assets_url]]css/site.css\" rel=\"stylesheet\"> or <img src=\"[[++assets_url]]images/whatever.jpg\" \u2026 > . You could use [[++base_url]]path/to/static_file , if your assets are not located inside of the assets folder. Set the MODX system setting link_tag_scheme to -1 (URL is relative to site_url) To create these settings easily, you could use the Cross Contexts Settings extra available on MODX Extras. Example Example settings for an en context Context setting Value base_url / cultureKey en site_url {url_scheme}{http_host}{base_url}{cultureKey}/ System settings The following MODX system settings are available in the namespace langrouter : Key Description Default langrouter.debug Log debug informations in the MODX ystem log. No langrouter.response_code Response code for the redirect to the right context, if the culture key is not set. HTTP/1.1 301 Moved Permanently langrouter.contextKeys (optional) Comma separated list of context keys which could be switched to. Defaults to the babel.contextKeys system setting. - Caution Please don't activate the friendly_urls_strict MODX system setting, if you use LangRouter. That could cause nasty redirect loops. Usage with other extras Some extras settings have to be changed to work well with LangRouter (and other routing plugins): pThumb Please set the system setting phpthumbof.cache_url to / . Otherwise the generated thumbnail path of the snippet/output filter will contain the {base_url}{cultureKey} prefix, that needs an additional .htaccess rule that removes this prefix.","title":"Usage"},{"location":"usage/#prepare-your-contexts","text":"After (or before) the installation of LangRouter you have to prepare your contexts. Create one context for each language and name it with the language name. Normally the context key would be equal with the cultureKey context setting of that language, i.e. en as context key and English as context name when the cultureKey is en . Create the context setting base_url in each context and set it to / . Create the context setting cultureKey in each context and set it to the according cultureKey, i.e. en . For each context create a site_url context setting and fill it with the following value: {url_scheme}{http_host}{base_url}{cultureKey}/ . MODX handles the placeholder replacements in that setting on its own. Fill the MODX system setting babel.contextDefault with the context key of the default language, if you did not fill this during the installation of LangRouter. In head section of the template insert the following line <base href=\"[[!++site_url]]\"> . Include the static files from the assets folder in your installation with [[++assets_url]]path/to/static_file , i.e. <link href=\"[[++assets_url]]css/site.css\" rel=\"stylesheet\"> or <img src=\"[[++assets_url]]images/whatever.jpg\" \u2026 > . You could use [[++base_url]]path/to/static_file , if your assets are not located inside of the assets folder. Set the MODX system setting link_tag_scheme to -1 (URL is relative to site_url) To create these settings easily, you could use the Cross Contexts Settings extra available on MODX Extras.","title":"Prepare your contexts"},{"location":"usage/#example","text":"Example settings for an en context Context setting Value base_url / cultureKey en site_url {url_scheme}{http_host}{base_url}{cultureKey}/","title":"Example"},{"location":"usage/#system-settings","text":"The following MODX system settings are available in the namespace langrouter : Key Description Default langrouter.debug Log debug informations in the MODX ystem log. No langrouter.response_code Response code for the redirect to the right context, if the culture key is not set. HTTP/1.1 301 Moved Permanently langrouter.contextKeys (optional) Comma separated list of context keys which could be switched to. Defaults to the babel.contextKeys system setting. - Caution Please don't activate the friendly_urls_strict MODX system setting, if you use LangRouter. That could cause nasty redirect loops.","title":"System settings"},{"location":"usage/#usage-with-other-extras","text":"Some extras settings have to be changed to work well with LangRouter (and other routing plugins):","title":"Usage with other extras"},{"location":"usage/#pthumb","text":"Please set the system setting phpthumbof.cache_url to / . Otherwise the generated thumbnail path of the snippet/output filter will contain the {base_url}{cultureKey} prefix, that needs an additional .htaccess rule that removes this prefix.","title":"pThumb"}]}