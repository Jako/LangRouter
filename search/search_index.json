{
    "docs": [
        {
            "location": "/", 
            "text": "LangRouter\n\n\nLangRouter is a language routing plugin for MODx Revolution that is meant to be\nused with Babel. It takes care of switching contexts that hold the translations,\ndepending on the URL requested by the client.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.2.4+\n\n\nPHP v5.3+\n\n\n\n\nFeatures\n\n\n\n\nLangRouter works out-of-the-box and doesn't require any URL rewrite rule changes in the webserver configuration.\n\n\nIt checks the client's browser accepted languages and switches to the first accepted and available language context.\n\n\nAll routing is handled internally by MODX. This greatly simplifies the setup and provides portability. \n\n\nLangRouter was tested with Apache and Lighttpd.", 
            "title": "Description"
        }, 
        {
            "location": "/#langrouter", 
            "text": "LangRouter is a language routing plugin for MODx Revolution that is meant to be\nused with Babel. It takes care of switching contexts that hold the translations,\ndepending on the URL requested by the client.", 
            "title": "LangRouter"
        }, 
        {
            "location": "/#requirements", 
            "text": "MODX Revolution 2.2.4+  PHP v5.3+", 
            "title": "Requirements"
        }, 
        {
            "location": "/#features", 
            "text": "LangRouter works out-of-the-box and doesn't require any URL rewrite rule changes in the webserver configuration.  It checks the client's browser accepted languages and switches to the first accepted and available language context.  All routing is handled internally by MODX. This greatly simplifies the setup and provides portability.   LangRouter was tested with Apache and Lighttpd.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for LangRouter in the Package Manager of your MODX installation and\ninstall it in there. You have to fill the context key of the default language\nduring the setup. See in \nUsage\n for the possible value.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install LangRouter.\n\n\n\n\nDownload the transport package from \nMODX Extras\n (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder or upload it manually in the MODX Package Manager.\n\n\nIn the Package Manager of your MODX installation select 'Search locally for packages' from the dropdown button.\n\n\nLangRouter should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package\nManagement\n. The GitHub\nrepository of LangRouter contains a\n\nconfig.json\n\nto build that package locally. Use this option, if you want to debug LangRouter\nand/or contribute bugfixes and enhancements.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for LangRouter in the Package Manager of your MODX installation and\ninstall it in there. You have to fill the context key of the default language\nduring the setup. See in  Usage  for the possible value.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install LangRouter.   Download the transport package from  MODX Extras  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder or upload it manually in the MODX Package Manager.  In the Package Manager of your MODX installation select 'Search locally for packages' from the dropdown button.  LangRouter should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package\nManagement . The GitHub\nrepository of LangRouter contains a config.json \nto build that package locally. Use this option, if you want to debug LangRouter\nand/or contribute bugfixes and enhancements.", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "Prepare your contexts\n\n\nAfter (or before) the installation of LangRouter you have to prepare your\ncontexts.\n\n\n\n\nCreate one context for each language and name it with the language name. Normally the context key would be equal with the cultureKey context setting of that language, i.e. \nen\n as \ncontext key\n and \nEnglish\n as \ncontext name\n when the cultureKey is \nen\n.\n\n\nCreate the context setting \nbase_url\n in each context and set it to \n/\n.\n\n\nCreate the context setting \ncultureKey\n in each context and set it to the according cultureKey, i.e. \nen\n.\n\n\nFor each context create a \nsite_url\n context setting and fill it with the following value: \n{url_scheme}{http_host}{base_url}{cultureKey}/\n. MODX handles the placeholder replacements in that setting on its own.\n\n\nFill the MODX system setting \nbabel.contextDefault\n with the context key of the default language, if you did not fill this during the installation of LangRouter.\n\n\nIn head section of the template insert the following line \nbase href=\"[[!++site_url]]\" /\n.\n\n\nInclude the static files from the assets folder in your installation with \n[[++assets_url]]path/to/static_file\n, i.e. \nlink href=\"[[++assets_url]]css/site.css\" rel=\"stylesheet\"/\n or \nimg src=\"[[++assets_url]]images/whatever.jpg\" \u2026 /\n. You could use \n[[++base_url]]path/to/static_file\n, if your assets are not located xinside of the assets folder.\n\n\nSet the MODX system setting \nlink_tag_scheme\n to \n-1\n (URL is relative to site_url)\n\n\n\n\nTo create these settings easily, you could use the \nCross Contexts\nSettings\n extra available\non MODX Extras.\n\n\nExample\n\n\nExample settings for an \nen\n context\n\n\n\n\n\n\n\n\nContext setting\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nbase_url\n\n\n/\n\n\n\n\n\n\ncultureKey\n\n\nen\n\n\n\n\n\n\nsite_url\n\n\n{url_scheme}{http_host}{base_url}{cultureKey}/\n\n\n\n\n\n\n\n\nSystem settings\n\n\nThe following MODX system settings are available in the namespace \nlangrouter\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlangrouter.debug\n\n\nLog debug informations in the MODX ystem log.\n\n\nNo\n\n\n\n\n\n\nlangrouter.response_code\n\n\nResponse code for the redirect to the right context, if the culture key is not set.\n\n\nHTTP/1.1 301 Moved Permanently\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\nPlease don't activate the \nfriendly_urls_strict\n MODX system setting, if you use LangRouter. That could cause nasty redirect loops.\n\n\n\n\nUsage with other extras\n\n\nSome extras settings have to be changed to work well with LangRouter (and other\nrouting plugins):\n\n\npThumb\n\n\nPlease set the system setting \nphpthumbof.cache_url\n to \n/\n. Otherwise the\ngenerated thumbnail path of the snippet/output filter will contain the\n\n{base_url}{cultureKey}\n prefix, that needs an additional .htaccess rule that\nremoves this prefix.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#prepare-your-contexts", 
            "text": "After (or before) the installation of LangRouter you have to prepare your\ncontexts.   Create one context for each language and name it with the language name. Normally the context key would be equal with the cultureKey context setting of that language, i.e.  en  as  context key  and  English  as  context name  when the cultureKey is  en .  Create the context setting  base_url  in each context and set it to  / .  Create the context setting  cultureKey  in each context and set it to the according cultureKey, i.e.  en .  For each context create a  site_url  context setting and fill it with the following value:  {url_scheme}{http_host}{base_url}{cultureKey}/ . MODX handles the placeholder replacements in that setting on its own.  Fill the MODX system setting  babel.contextDefault  with the context key of the default language, if you did not fill this during the installation of LangRouter.  In head section of the template insert the following line  base href=\"[[!++site_url]]\" / .  Include the static files from the assets folder in your installation with  [[++assets_url]]path/to/static_file , i.e.  link href=\"[[++assets_url]]css/site.css\" rel=\"stylesheet\"/  or  img src=\"[[++assets_url]]images/whatever.jpg\" \u2026 / . You could use  [[++base_url]]path/to/static_file , if your assets are not located xinside of the assets folder.  Set the MODX system setting  link_tag_scheme  to  -1  (URL is relative to site_url)   To create these settings easily, you could use the  Cross Contexts\nSettings  extra available\non MODX Extras.", 
            "title": "Prepare your contexts"
        }, 
        {
            "location": "/usage/#example", 
            "text": "Example settings for an  en  context     Context setting  Value      base_url  /    cultureKey  en    site_url  {url_scheme}{http_host}{base_url}{cultureKey}/", 
            "title": "Example"
        }, 
        {
            "location": "/usage/#system-settings", 
            "text": "The following MODX system settings are available in the namespace  langrouter :     Key  Description  Default      langrouter.debug  Log debug informations in the MODX ystem log.  No    langrouter.response_code  Response code for the redirect to the right context, if the culture key is not set.  HTTP/1.1 301 Moved Permanently      Caution  Please don't activate the  friendly_urls_strict  MODX system setting, if you use LangRouter. That could cause nasty redirect loops.", 
            "title": "System settings"
        }, 
        {
            "location": "/usage/#usage-with-other-extras", 
            "text": "Some extras settings have to be changed to work well with LangRouter (and other\nrouting plugins):", 
            "title": "Usage with other extras"
        }, 
        {
            "location": "/usage/#pthumb", 
            "text": "Please set the system setting  phpthumbof.cache_url  to  / . Otherwise the\ngenerated thumbnail path of the snippet/output filter will contain the {base_url}{cultureKey}  prefix, that needs an additional .htaccess rule that\nremoves this prefix.", 
            "title": "pThumb"
        }, 
        {
            "location": "/donate/", 
            "text": "Support LangRouter\n\n\nLangRouter\n is and always will be free and open-source, but it still requires many man-hours of development, \nbug-fixing, support in MODX forums and on GitHub between the releases.\n\n\nPlease support the ongoing and past development of \nLangRouter\n by making a donation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLangRouter\n development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-langrouter", 
            "text": "LangRouter  is and always will be free and open-source, but it still requires many man-hours of development, \nbug-fixing, support in MODX forums and on GitHub between the releases.  Please support the ongoing and past development of  LangRouter  by making a donation below.           LangRouter  development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Support LangRouter"
        }
    ]
}